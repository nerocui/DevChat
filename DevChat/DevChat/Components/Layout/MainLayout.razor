@using DevChat.Client.Components
@using DevChat.Data
@using Microsoft.AspNetCore.Identity
@inject AuthenticationStateProvider GetAuthenticationStateAsync
@inject UserManager<ApplicationUser> userManager
@inject NavigationManager NavigationManager
@inherits LayoutComponentBase

<FluentLayout>
    <FluentHeader>
        <div class="header-container">
            <FluentLabel
                Style="color: white"
                Typo="Typography.H3">
                Valor
            </FluentLabel>
            <div>
                <FluentStack Orientation="Orientation.Horizontal">
                    <AuthorizeView>
                        <Authorized>
                            <ProfileIcon/>
                        </Authorized>
                        <NotAuthorized>
                            <FluentAnchor
                                Appearance="Appearance.Stealth"
                                Href="Account/Login"
                                >
                                Login
                            </FluentAnchor>
                        </NotAuthorized>
                    </AuthorizeView>
                </FluentStack>
            </div>
        </div>
    </FluentHeader>
    <FluentStack Class="main" Orientation="Orientation.Horizontal" Width="100%">
        <NavMenu />
        <FluentBodyContent>
            <div class="content">
                @Body
            </div>
        </FluentBodyContent>
    </FluentStack>
    <FluentFooter>
        <div class="link1">
            <a href="https://www.fluentui-blazor.net" target="_blank">Documentation and demos</a>
        </div>
        <div class="link2">
            <a href="https://learn.microsoft.com/en-us/aspnet/core/blazor" target="_blank">About Blazor</a>
        </div>
    </FluentFooter>
</FluentLayout>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private ApplicationUser? User;
    private bool ProfilePopoverOpen;

    protected override async Task OnInitializedAsync()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        User = await userManager.GetUserAsync(authstate.User);
    }
}
