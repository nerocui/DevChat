@using DevChat.Share.Dtos
@using System.Text.Json
@using System.Text
@using DevChat.Client.FormModels
@using DevChat.Client.Services
@using Microsoft.AspNetCore.SignalR.Client
@inject HttpClient client
@inject UserService userService
@inject NavigationManager Navigation
@inject IJSRuntime JS
@implements IAsyncDisposable

@if (loading)
{
    <FluentProgress></FluentProgress>
}
<div class="messages-container">
    <FluentStack
        Orientation="Orientation.Vertical"
        VerticalGap="8">
        <div class="more-btn-container">
            <FluentButton OnClick="LoadMore">
                Load More
            </FluentButton>
        </div>
        @foreach (var message in messages)
        {
            <div class=@($"message message-list-item {(message.NewlyLoadedBottom ? "message-new-bottom" : "")}")>
                <div class="message-row @(message.IsFromYou ? "right" : "left")">
                    <img src="@message.Sender.AvatarUrl"/>
                    <FluentCard Width="400px" Height="240px">
                        <div class="message-metadata">
                            <p>@($"{message.Sender.FirstName} {message.Sender.LastName}")</p>
                            <p>@($"{message.CreatedAt.Hour}:{message.CreatedAt.Minute}")</p>
                        </div>
                        <iframe loading="lazy" src="@($"/message/{message.ContentId}")" sandbox="allow-scripts allow-same-origin"/>
                    </FluentCard>
                </div>
            </div>
            <div class="devider message-list-item">

            </div>
        }
    </FluentStack>
    
</div>
<div class="compose-container">
    <div><p>@isTyping</p></div>
    <div class="compose">
        <div class="editors-container">
            <div class="editors-flex">
                <div class="editor-container right-border">
                    <FluentLabel Typo="Typography.H5">HTML</FluentLabel>
                    <div style="position: relative;">
                        <textarea id="code-mirror-editor-html"/>
                    </div>
                </div>
                <div class="editor-container right-border">
                    <FluentLabel Typo="Typography.H5">JavaScript</FluentLabel>
                    <div style="position: relative;">
                        <textarea id="code-mirror-editor-js"/>
                    </div>
                </div>
                <div class="editor-container right-border">
                    <FluentLabel Typo="Typography.H5">CSS</FluentLabel>
                    <div style="position: relative;">
                        <textarea id="code-mirror-editor-css"/>
                    </div>
                </div>
            </div>
            
        </div>
        <div class="send-button">
            <FluentButton IconEnd="@(new Icons.Regular.Size20.Send())" OnClick="SendMessage"/>
        </div>
    </div>
</div>


@code {
    [Parameter]
    public string? Id { get; set; }
    private UserDtoForViewing User;
    private IJSObjectReference? module;
    private List<MessageDtoForViewing> messages = new List<MessageDtoForViewing>();
    private bool loading = false;

    private HubConnection? hubConnection;
    private string isTyping { get; set; } = "";

    // Declare a timer and a throttle time
    private Timer _timer;
    private const int _throttleTime = 5000; // 5 seconds

    private Timer _receiveTimer;
    private const int _receiveThrottleTime = 5000; // 5 seconds

    // This helper method disposes the timer and clears the isTyping string
    private void ClearTypingIndicator(object state)
    {
        _receiveTimer.Dispose();
        _receiveTimer = null;
        isTyping = "";
        InvokeAsync(StateHasChanged);
    }

    public void OnKeyDown()
    {
        // Check if the timer is already running
        if (_timer != null) return;

        // Create a new timer that will call IndicateTyping after the throttle time
        _timer = new Timer(IndicateTyping, null, 0, _throttleTime);
    }

    // This function is called when the user is constantly typing
    private void IndicateTyping(object state)
    {
        // Do something to indicate typing, such as showing a message or an icon
        hubConnection.InvokeAsync("IndicateTyping", Id);

        // Dispose the timer
        _timer.Dispose();
        _timer = null;
    }

    public async void OnSendKeyEvent()
    {
        await SendMessage();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            CodeMirrorService.Register(this);
            module = await JS.InvokeAsync<IJSObjectReference>(
                "import", "./Components/Conversation.razor.js");
            await module.InvokeVoidAsync("initializeEditor");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (Id is not null)
        {
            User = await userService.GetAuthenticatedUser();
            await userService.GetUsersByConvId(Id);
            await LoadMessages();
            await SubscribeToMessages();
        }
    }

    private async Task SubscribeToMessages()
    {
        if (string.IsNullOrWhiteSpace(Id))
        {
            return;
        }
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/MessageHub"))
            .Build();

        hubConnection.On<MessageDtoForViewing>("ReceiveMessage", async (message) =>
        {
            message.IsFromYou = User.Id == message.Sender.Id;
            messages.Add(message);
            await InvokeAsync(StateHasChanged);
            await Task.Delay(1);
            ScrollToBottom();
        });

        hubConnection.On<string>("IndicateTyping", async (userId) =>
        {
            // Dispose the previous timer if it exists
            _receiveTimer?.Dispose();

            // Create a new timer that will call the helper method after the throttle time
            _receiveTimer = new Timer(ClearTypingIndicator, null, _throttleTime, Timeout.Infinite);

            // Set the isTyping string to show the user name
            if (userId != User.Id)
            {
                var typingUser = await userService.GetUser(userId);
                isTyping = $"{typingUser.FirstName} {typingUser.LastName} is typing...";
            }
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
        await hubConnection.InvokeAsync("AddToGroup", Id);
    }

    private async Task LoadMessages()
    {
        loading = true;
        await Task.Delay(1);
        var res = await client.GetAsync($"/message/getpage?convId={Id}&skip={messages.Count}");
        var newMessagesJson = await res.Content.ReadAsStringAsync();
        var newMessages = JsonSerializer.Deserialize<ICollection<MessageDtoForViewing>>(newMessagesJson, new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true,
            });

        foreach (var message in newMessages)
        {
            messages.Add(message);
        }
        loading = false;
        StateHasChanged();
        ScrollToBottom();
    }

    private async Task SendMessage()
    {
        var html = await module.InvokeAsync<string>("getHtmlString");
        if (string.IsNullOrWhiteSpace(html.Trim()))
        {
            return;
        }

        var js = await module.InvokeAsync<string>("getJsString");
        var css = await module.InvokeAsync<string>("getCssString");

        var composeBox = new ComposeBoxModel()
        {
            Html = html,
            Js = js,
            Css = css,
        };
        var res = await client.PutAsync(
            $"/message/send?convId={Id}",
            new StringContent(JsonSerializer.Serialize(composeBox), Encoding.UTF8, "application/json")
            );
        if (res.IsSuccessStatusCode)
        {
            await module.InvokeVoidAsync("resetHtmlString");
            await module.InvokeVoidAsync("resetJsString");
            await module.InvokeVoidAsync("resetCssString");
            await LoadMessages();
        }
    }

    private async void ScrollToBottom()
    {
        module.InvokeVoidAsync("scrollToBottom");
    }

    private async void ScrollToNewlyLoadedBottom()
    {
        module.InvokeVoidAsync("scrollToNewBottom");
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        CodeMirrorService.Unregister(this);
        await hubConnection.InvokeAsync("RemoveFromGroup", Id);
        await hubConnection.DisposeAsync();
        if (module is not null)
        {
            await module.DisposeAsync();
        }
    }

    private async void LoadMore()
    {
        var res = await client.GetAsync($"/message/getpage?convId={Id}&skip={messages.Count}");
        var newMessagesJson = await res.Content.ReadAsStringAsync();
        var newMessages = JsonSerializer.Deserialize<List<MessageDtoForViewing>>(newMessagesJson, new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true,
            });

        if (newMessages.Count == 0)
        {
            return;
        }

        for (var i = 0; i < newMessages.Count; i++)
        {
            if (i == newMessages.Count - 1)
            {
                newMessages[i].NewlyLoadedBottom = true;
            }
            messages.Insert(i, newMessages[i]);
        }
        StateHasChanged();
        ScrollToNewlyLoadedBottom();
    }
}
