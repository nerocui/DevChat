@using DevChat.Share.Dtos
@using System.Text.Json
@using System.Text
@using DevChat.Client.FormModels
@using BlazorMonaco
@using BlazorMonaco.Editor
@using BlazorMonaco.Languages
@inject HttpClient client

@if (loading)
{
    <FluentProgress></FluentProgress>
}
<div class="messages-container">
    <FluentStack
        Orientation="Orientation.Vertical"
        VerticalGap="8">
        @foreach (var message in messages)
        {
            <div class="message">
                <FluentCard Width="400px" Height="240px">
                    <iframe src="@($"/message/{message.ContentId}")" sandbox="allow-scripts allow-same-origin"/>
                </FluentCard>
            </div>
        }
    </FluentStack>
    
</div>
<div class="compose-container">
    <div class="compose">
        <div class="editors-container">
            <div class="editors-flex">
                <div class="editor-container right-border">
                    <FluentLabel Typo="Typography.H5">HTML</FluentLabel>
                    <StandaloneCodeEditor @ref="_htmlEditor" Id="editor-instance-html" ConstructionOptions="HTMLEditorConstructionOptions"/>
                </div>
                <div class="editor-container right-border">
                    <FluentLabel Typo="Typography.H5">JavaScript</FluentLabel>
                    <StandaloneCodeEditor @ref="_jsEditor" Id="editor-instance-js" ConstructionOptions="JavascriptEditorConstructionOptions"/>
                </div>
                <div class="editor-container right-border">
                    <FluentLabel Typo="Typography.H5">CSS</FluentLabel>
                    <StandaloneCodeEditor @ref="_cssEditor" Id="editor-instance-css" ConstructionOptions="CssEditorConstructionOptions"/>
                </div>
            </div>
            
        </div>
        <div class="send-button">
            <FluentButton IconEnd="@(new Icons.Regular.Size20.Send())" OnClick="SendMessage"/>
        </div>
    </div>
</div>


@code {
    [Parameter]
    public string? Id { get; set; }
    private ICollection<MessageDtoForViewing> messages = new List<MessageDtoForViewing>();
    private bool loading = false;

    private StandaloneCodeEditor _htmlEditor = null!;
    private StandaloneCodeEditor _jsEditor = null!;
    private StandaloneCodeEditor _cssEditor = null!;


    protected override async Task OnInitializedAsync()
    {
        await LoadMessages();
    }

    private async Task LoadMessages()
    {
        loading = true;
        await Task.Delay(1);
        var res = await client.GetAsync($"/message/getpage?convId={Id}&skip={messages.Count}");
        var newMessagesJson = await res.Content.ReadAsStringAsync();
        var newMessages = JsonSerializer.Deserialize<ICollection<MessageDtoForViewing>>(newMessagesJson, new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true,
            });

        foreach (var message in newMessages)
        {
            messages.Add(message);
        }
        loading = false;
        StateHasChanged();
    }

    private async Task SendMessage()
    {
        var htmlModel = await _htmlEditor.GetModel();
        var html = await htmlModel.GetValue(EndOfLinePreference.LF, true);
        if (string.IsNullOrWhiteSpace(html.Trim()))
        {
            return;
        }
        var jsModel = await _jsEditor.GetModel();
        var cssModel = await _cssEditor.GetModel();

        var composeBox = new ComposeBoxModel()
        {
            Html = html,
            Js = await jsModel.GetValue(EndOfLinePreference.LF, true),
            Css = await cssModel.GetValue(EndOfLinePreference.LF, true),
        };
        var res = await client.PutAsync(
            $"/message/send?convId={Id}",
            new StringContent(JsonSerializer.Serialize(composeBox), Encoding.UTF8, "application/json")
            );
        if (res.IsSuccessStatusCode)
        {
            htmlModel.SetValue("");
            jsModel.SetValue("");
            cssModel.SetValue("");
            await LoadMessages();
        }
    }

    private StandaloneEditorConstructionOptions HTMLEditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
            {
                AutomaticLayout = true,
                Minimap = new(){ Enabled = false },
                Language = "html",
            };
    }

    private StandaloneEditorConstructionOptions JavascriptEditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
            {
                AutomaticLayout = true,
                Minimap = new(){ Enabled = false },
                Language = "javascript",
            };
    }

    private StandaloneEditorConstructionOptions CssEditorConstructionOptions(StandaloneCodeEditor editor)
    {
        return new StandaloneEditorConstructionOptions
            {
                AutomaticLayout = true,
                Minimap = new(){ Enabled = false },
                Language = "css",
            };
    }
}
