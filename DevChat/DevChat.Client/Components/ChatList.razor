@inject HttpClient client
@using System.Text.Json
@using DevChat.Share.Dtos
@using DevChat.Client.FormModels
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation
@implements IAsyncDisposable

<div class="chat-list">
    <FluentStack
        HorizontalGap="8"
        Orientation="Orientation.Horizontal"
        HorizontalAlignment="HorizontalAlignment.End">
        <FluentButton
            IconEnd="@(new Icons.Regular.Size24.Search())"
            Title="Search" />
        <FluentButton
            Id="new-chat-button"
            OnClick="@(() => newChatPopoverOpen = !newChatPopoverOpen)"
            IconEnd="@(new Icons.Regular.Size24.Add())"
            Title="New Chat"/>
        <FluentPopover
            Style="width: 260px;"
            AnchorId="new-chat-button"
            @bind-Open="newChatPopoverOpen"
            HorizontalPosition="HorizontalPosition.Left">
            <Header >
                <p><b>New Chat</b></p>
            </Header>
            <Body>
                <EditForm Model="@newChatSearch" OnValidSubmit="@SearchNewChat">
                    <FluentStack
                        HorizontalGap="4"
                        Orientation="Orientation.Horizontal">
                        <FluentTextField @bind-Value="newChatSearch.Email"
                            Placeholder="Enter email to search..." />
                        <FluentButton
                            Type="ButtonType.Submit"
                            IconEnd="@(new Icons.Regular.Size24.Search())"
                            Title="Search" />
                    </FluentStack>
                </EditForm>
            </Body>
            <Footer>
                @if (searchingNewChat)
                {
                    <FluentProgress></FluentProgress>
                }
            </Footer>
        </FluentPopover>
    </FluentStack>
    @if (displayingNewChatResult)
    {
        <FluentCard>
            <FluentStack
                Orientation="Orientation.Vertical"
                VerticalGap="8">
                <FluentLabel
                    Typo="Typography.Header">
                    Search Result
                </FluentLabel>
                <FluentLabel
                    Typo="Typography.Body">
                    Email: @newChatResult.Email
                </FluentLabel>
                <FluentButton
                    Appearance="Appearance.Accent"
                    IconEnd="@(new Icons.Regular.Size20.Send())"
                    OnClick="CreateChat"
                    Title="Message">
                    Message
                </FluentButton>
            </FluentStack>
        </FluentCard>
    }
    else if (displayingChats)
    {
        <FluentListbox
            Class="conversation-list-box"
            TOption="string"
            OptionSelected="IsSelected"
            ValueChanged="@(convId => Navigation.NavigateTo($"/chat/{convId}"))">
            @foreach (var conversation in conversations)
            {
                <FluentOption Selected="@(conversation.Id == Id)" Class="conversation-item-option" Value="@(conversation.Id)">
                    <div class="conversation-item">
                        <img src="@(conversation.AvatarUrl)"/>
                        <p>@conversation.Title</p>
                    </div>
                </FluentOption>
            }
        </FluentListbox>
    }
</div>

@code {
    [Parameter]
    public string? Id { get; set; }
    private bool newChatPopoverOpen = false;
    private NewChatSearchModel newChatSearch { get; set; } = new();
    private bool displayingNewChatResult = false;
    private UserDtoForViewing newChatResult;
    private bool searchingNewChat = false;
    private bool displayingChats = true;
    private ICollection<ConversationDtoForViewing> conversations { get; set; } = new List<ConversationDtoForViewing>();

    private HubConnection? hubConnection;

    private async Task SubscribeToNewChats()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/NotificationHub"))
            .Build();

        hubConnection.On<ConversationDtoForViewing>("NewChatCreated", (conversation) =>
        {
            conversations.Add(conversation);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        var res = await client.GetAsync("/conversation/getall");
        var convsJson = await res.Content.ReadAsStringAsync();
        conversations = JsonSerializer.Deserialize<ICollection<ConversationDtoForViewing>>(convsJson, new JsonSerializerOptions()
        {
            PropertyNameCaseInsensitive = true
        });
        await SubscribeToNewChats();
    }

    private async Task SearchNewChat()
    {
        searchingNewChat = true;
        // yields to the UI thread to render the loading UI
        await Task.Delay(1);
        var res = await client.GetAsync($"/conversation/GetUserByEmail?email={newChatSearch.Email}");
        var userJson = await res.Content.ReadAsStringAsync();
        var user = JsonSerializer.Deserialize<UserDtoForViewing>(userJson, new JsonSerializerOptions()
        {
            PropertyNameCaseInsensitive = true,
        });
        newChatResult = user;
        searchingNewChat = false;
        displayingChats = false;
        displayingNewChatResult = true;
        newChatPopoverOpen = false;
        newChatSearch.Email = string.Empty;
    }

    private async Task CreateChat()
    {
        var email = newChatResult.Email;
        newChatResult = null;
        displayingNewChatResult = false;
        displayingChats = true;
        var res = await client.PutAsync($"/conversation/create?email={email}", null);
        var convId = await res.Content.ReadAsStringAsync();
        //nav to chat with convId
        Navigation.NavigateTo($"/chat/{convId}");
    }

    private bool IsSelected(string convId)
    {
        return convId == Id;
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
